{"version":3,"sources":["components/Home.tsx","types.ts","moves.ts","Sound.ts","components/CenteredDiv.tsx","components/Cell.tsx","components/Header.tsx","components/Game.tsx","components/GameNotFound.tsx","components/GameWrapper.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Home","history","useHistory","createGame","React","useCallback","a","fetch","method","response","json","body","push","gameId","window","sessionStorage","setItem","HomeWrapper","HomeImage","src","alt","CreateButton","onClick","Color","Piece","PawnPosition","styled","div","button","props","theme","color","primary","fontFamily","img","emptyRow","empty","Rook","black","Knight","Bishop","Queen","King","Pawn","white","getPotentialMoves","gameState","activeCoordinates","row","column","cell","boardState","potentialMovesByAxis","colunm","up_left","Axis","up_right","bottom_right","bottom_left","left","up","right","bottom","i","push_cell_to_axis","diagonal","concat","orthogonal","diagonal_1","orthogonal_1","getAllAxes","piece","potentialMoves","firstPawnMove","push_cell","advancing","length","attacking","blocked","coordinates","this","notInBoard","pawnPosition","Array","sound","soundElement","document","createElement","setAttribute","style","display","appendChild","play","pause","CenteredDiv","CentredDivContainer","children","CellComponent","memo","setGameState","baseColor","playerColor","socket","isActiveCell","isEqual","isPotentialMove","undefined","find","potentialMove","CellContainer","winner","newGameState","turn","current","emit","PotentialMove","PieceImg","tertiary","secondary","grey","Header","HeaderContainer","Turn","YouAre","TurnWrapper","PawnImage","YouAreWrapper","Game","useState","setPotentialMoves","useRef","io","useEffect","on","GameWrapper","BoardWrapper","Winner","Board","map","r","Row","c","j","toString","WinnerWrapper","WinnerPawn","GameNotFound","GameNotFoundLabel","span","useParams","fetchError","setFetchError","setPlayerColor","then","status","data","catch","storedPlayerColor","getItem","LoadingSpinner","className","AppWrapper","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.60ad1641.chunk.js","sourcesContent":["import React from 'react'\nimport { useHistory } from 'react-router-dom'\nimport styled from 'styled-components'\n\nexport function Home() {\n    const history = useHistory()\n    const createGame = React.useCallback(async () => {\n        const response = await fetch(`/create-room`, {\n            method: 'POST',\n        })\n        const body = await response.json()\n        history.push(`/game/${body.gameId}`)\n        window.sessionStorage.setItem(body.gameId, 'white')\n    }, [history])\n\n    return (\n        <HomeWrapper>\n            <HomeImage src={'../chess_icons/chess_home.svg'} alt=\"home\" />\n            <CreateButton onClick={createGame}>Create Game</CreateButton>\n        </HomeWrapper>\n    )\n}\n\nexport const HomeWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-between;\n    height: 450px;\n`\n\nconst CreateButton = styled.button`\n    width: 200px;\n    height: 50px;\n    background-color: ${props => props.theme.color.primary};\n    color: white;\n    font-size: 18px;\n    font-weight: bold;\n    border: 1px solid black;\n    border-radius: 3px;\n    cursor: pointer;\n    font-family: ${props => props.theme.fontFamily};\n`\n\nexport const HomeImage = styled.img`\n    height: 300px;\n    width: 300px;\n    animation: bubble 1s forwards;\n    animation-name: slides;\n    animation-duration: 2s;\n`\n","export interface GameState {\n    readonly gameId: string\n    readonly turn: Color\n    readonly boardState: BoardState\n    readonly activeCoordinates?: Coordinates\n    readonly isFirstRound: boolean\n    readonly winner?: Color\n}\n\nexport enum Color {\n    white = 'white',\n    black = 'black',\n}\n\nexport enum Piece {\n    King = 'king',\n    Rook = 'rook',\n    Bishop = 'bishop',\n    Queen = 'queen',\n    Knight = 'knight',\n    Pawn = 'pawn',\n}\n\nexport enum PawnPosition {\n    attacking,\n    advancing,\n}\n\nconst emptyRow: Row = [\n    { empty: true },\n    { empty: true },\n    { empty: true },\n    { empty: true },\n    { empty: true },\n    { empty: true },\n    { empty: true },\n    { empty: true },\n]\n\nexport type BoardState = [Row, Row, Row, Row, Row, Row, Row, Row]\n\ntype Row = [Cell, Cell, Cell, Cell, Cell, Cell, Cell, Cell]\n\nexport const initialBoardState: BoardState = [\n    [\n        { piece: Piece.Rook, color: Color.black, empty: false },\n        { piece: Piece.Knight, color: Color.black, empty: false },\n        { piece: Piece.Bishop, color: Color.black, empty: false },\n        { piece: Piece.Queen, color: Color.black, empty: false },\n        { piece: Piece.King, color: Color.black, empty: false },\n        { piece: Piece.Bishop, color: Color.black, empty: false },\n        { piece: Piece.Knight, color: Color.black, empty: false },\n        { piece: Piece.Rook, color: Color.black, empty: false },\n    ],\n    [\n        { piece: Piece.Pawn, color: Color.black, empty: false },\n        { piece: Piece.Pawn, color: Color.black, empty: false },\n        { piece: Piece.Pawn, color: Color.black, empty: false },\n        { piece: Piece.Pawn, color: Color.black, empty: false },\n        { piece: Piece.Pawn, color: Color.black, empty: false },\n        { piece: Piece.Pawn, color: Color.black, empty: false },\n        { piece: Piece.Pawn, color: Color.black, empty: false },\n        { piece: Piece.Pawn, color: Color.black, empty: false },\n    ],\n    [...emptyRow],\n    [...emptyRow],\n    [...emptyRow],\n    [...emptyRow],\n    [\n        { piece: Piece.Pawn, color: Color.white, empty: false },\n        { piece: Piece.Pawn, color: Color.white, empty: false },\n        { piece: Piece.Pawn, color: Color.white, empty: false },\n        { piece: Piece.Pawn, color: Color.white, empty: false },\n        { piece: Piece.Pawn, color: Color.white, empty: false },\n        { piece: Piece.Pawn, color: Color.white, empty: false },\n        { piece: Piece.Pawn, color: Color.white, empty: false },\n        { piece: Piece.Pawn, color: Color.white, empty: false },\n    ],\n    [\n        { piece: Piece.Rook, color: Color.white, empty: false },\n        { piece: Piece.Knight, color: Color.white, empty: false },\n        { piece: Piece.Bishop, color: Color.white, empty: false },\n        { piece: Piece.Queen, color: Color.white, empty: false },\n        { piece: Piece.King, color: Color.white, empty: false },\n        { piece: Piece.Bishop, color: Color.white, empty: false },\n        { piece: Piece.Knight, color: Color.white, empty: false },\n        { piece: Piece.Rook, color: Color.white, empty: false },\n    ],\n]\n\nexport const initialGameState: GameState = {\n    gameId: '0000',\n    boardState: initialBoardState,\n    turn: Color.white,\n    isFirstRound: true,\n}\n\nexport interface Coordinates {\n    row: number\n    column: number\n}\n\nexport type Cell =\n    | {\n          piece: Piece\n          color: Color\n          empty: false\n      }\n    | {\n          empty: true\n      }\n","import { Coordinates, Piece, Color, GameState, PawnPosition } from './types'\n\nexport function getPotentialMoves(gameState: GameState, color: Color): Coordinates[] {\n    if (!gameState.activeCoordinates) {\n        return []\n    }\n\n    const { row, column } = gameState.activeCoordinates\n\n    const cell = gameState.boardState[row][column]\n    if (cell.empty) {\n        return []\n    }\n\n    const potentialMovesByAxis = getAllAxes(row, column, gameState, color)\n\n    if (cell.piece === Piece.Queen) {\n        return potentialMovesByAxis.diagonal.concat(potentialMovesByAxis.orthogonal)\n    }\n\n    if (cell.piece === Piece.Bishop) {\n        return potentialMovesByAxis.diagonal\n    }\n\n    if (cell.piece === Piece.Rook) {\n        return potentialMovesByAxis.orthogonal\n    }\n\n    if (cell.piece === Piece.King) {\n        return potentialMovesByAxis.diagonal_1.concat(potentialMovesByAxis.orthogonal_1)\n    }\n\n    const potentialMoves = new Axis(gameState, color)\n\n    if (cell.piece === Piece.Pawn) {\n        const firstPawnMove = row === 1 || row === 6 ? true : false\n\n        if (cell.color === Color.black) {\n            potentialMoves.push_cell({ row: row + 1, column: column }, PawnPosition.advancing)\n            if (firstPawnMove && potentialMoves.length !== 0) {\n                potentialMoves.push_cell({ row: row + 2, column: column }, PawnPosition.advancing)\n            }\n\n            potentialMoves.push_cell({ row: row + 1, column: column + 1 }, PawnPosition.attacking)\n            potentialMoves.push_cell({ row: row + 1, column: column - 1 }, PawnPosition.attacking)\n        }\n\n        if (cell.color === Color.white) {\n            potentialMoves.push_cell({ row: row - 1, column: column }, PawnPosition.advancing)\n            if (firstPawnMove && potentialMoves.length !== 0) {\n                potentialMoves.push_cell({ row: row - 2, column: column }, PawnPosition.advancing)\n            }\n\n            potentialMoves.push_cell({ row: row - 1, column: column + 1 }, PawnPosition.attacking)\n            potentialMoves.push_cell({ row: row - 1, column: column - 1 }, PawnPosition.attacking)\n        }\n    }\n\n    if (cell.piece === Piece.Knight) {\n        potentialMoves.push_cell({ row: row - 2, column: column - 1 })\n        potentialMoves.push_cell({ row: row - 2, column: column + 1 })\n        potentialMoves.push_cell({ row: row + 2, column: column - 1 })\n        potentialMoves.push_cell({ row: row + 2, column: column + 1 })\n\n        potentialMoves.push_cell({ row: row - 1, column: column - 2 })\n        potentialMoves.push_cell({ row: row - 1, column: column + 2 })\n        potentialMoves.push_cell({ row: row + 1, column: column - 2 })\n        potentialMoves.push_cell({ row: row + 1, column: column + 2 })\n    }\n\n    return potentialMoves\n}\n\nfunction getAllAxes(\n    row: number,\n    colunm: number,\n    gameState: GameState,\n    color: Color\n): {\n    diagonal: Coordinates[]\n    orthogonal: Coordinates[]\n    diagonal_1: Coordinates[]\n    orthogonal_1: Coordinates[]\n} {\n    const up_left = new Axis(gameState, color)\n    const up_right = new Axis(gameState, color)\n    const bottom_right = new Axis(gameState, color)\n    const bottom_left = new Axis(gameState, color)\n    const left = new Axis(gameState, color)\n    const up = new Axis(gameState, color)\n    const right = new Axis(gameState, color)\n    const bottom = new Axis(gameState, color)\n\n    for (let i = 1; i < 8; i++) {\n        up_left.push_cell_to_axis({ row: row - i, column: colunm - i })\n        up_right.push_cell_to_axis({ row: row - i, column: colunm + i })\n        bottom_right.push_cell_to_axis({ row: row + i, column: colunm + i })\n        bottom_left.push_cell_to_axis({ row: row + i, column: colunm - i })\n        left.push_cell_to_axis({ row: row, column: colunm - i })\n        up.push_cell_to_axis({ row: row - i, column: colunm })\n        right.push_cell_to_axis({ row: row, column: colunm + i })\n        bottom.push_cell_to_axis({ row: row + i, column: colunm })\n    }\n\n    return {\n        diagonal: [...up_left.concat(up_right).concat(bottom_left).concat(bottom_right)],\n        orthogonal: [...left.concat(up).concat(right).concat(bottom)],\n        diagonal_1: [up_left[0], up_right[0], bottom_left[0], bottom_right[0]],\n        orthogonal_1: [left[0], up[0], right[0], bottom[0]],\n    }\n}\n\nclass Axis extends Array<Coordinates> {\n    private gameState: GameState\n    private blocked: boolean\n    private color: Color\n\n    constructor(gameState: GameState, color: Color) {\n        super()\n        this.gameState = gameState\n        this.blocked = false\n        this.color = color\n    }\n\n    public push_cell_to_axis(coordinates: Coordinates) {\n        if (this.notInBoard(coordinates) || this.blocked) {\n            return\n        }\n\n        const cell = this.gameState.boardState[coordinates.row][coordinates.column]\n\n        if (cell && !cell.empty) {\n            this.blocked = true\n        }\n\n        this.push_cell(coordinates)\n    }\n\n    public push_cell(coordinates: Coordinates, pawnPosition?: PawnPosition) {\n        if (this.notInBoard(coordinates)) {\n            return\n        }\n\n        const cell = this.gameState.boardState[coordinates.row][coordinates.column]\n        if (!cell.empty && cell.color === this.color) {\n            return\n        }\n\n        if (!cell.empty && pawnPosition === PawnPosition.advancing) {\n            return\n        }\n\n        if (cell.empty && pawnPosition === PawnPosition.attacking) {\n            return\n        }\n\n        this.push(coordinates)\n    }\n\n    private notInBoard(coordinates: Coordinates) {\n        return (\n            coordinates.row < 0 ||\n            coordinates.row > 7 ||\n            coordinates.column < 0 ||\n            coordinates.column > 7\n        )\n    }\n}\n","class Sound {\n    private soundElement: HTMLAudioElement\n    constructor(src: string) {\n        this.soundElement = document.createElement('audio')\n        this.soundElement.src = src\n        this.soundElement.setAttribute('preload', 'auto')\n        this.soundElement.setAttribute('controls', 'none')\n        this.soundElement.style.display = 'none'\n        document.body.appendChild(this.soundElement)\n    }\n\n    public play() {\n        this.soundElement.play()\n    }\n\n    public stop() {\n        this.soundElement.pause()\n    }\n}\n\nexport const sound = new Sound('../move.mp3')\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport function CenteredDiv(props: React.PropsWithChildren<{}>) {\n    return <CentredDivContainer>{props.children}</CentredDivContainer>\n}\n\nconst CentredDivContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    height: 100%;\n`\n","import { isEqual } from 'lodash'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { sound } from '../Sound'\nimport { Cell, Coordinates, Color, GameState, Piece } from '../types'\nimport { CenteredDiv } from './CenteredDiv'\n\nexport interface CellComponentProps {\n    cell: Cell\n    coordinates: Coordinates\n    potentialMoves: Coordinates[]\n    playerColor: Color\n    gameState: GameState\n    setGameState: React.Dispatch<React.SetStateAction<GameState>>\n    baseColor: Color\n    socket: React.MutableRefObject<SocketIOClient.Socket>\n}\n\nexport const CellComponent = React.memo(function (props: CellComponentProps) {\n    const {\n        cell,\n        coordinates,\n        potentialMoves,\n        setGameState,\n        gameState,\n        baseColor,\n        playerColor,\n        socket,\n    } = props\n\n    const { activeCoordinates } = gameState\n    const isActiveCell = isEqual(activeCoordinates, coordinates)\n    const isPotentialMove =\n        potentialMoves.find(potentialMove => isEqual(potentialMove, coordinates)) !== undefined\n\n    const onCellClickHandler = () => {\n        // game over\n        if (gameState.winner) {\n            return\n        }\n\n        const newGameState = { ...gameState }\n        newGameState.activeCoordinates = coordinates\n\n        if (cell.empty || isActiveCell || cell.color !== playerColor) {\n            newGameState.activeCoordinates = undefined\n        }\n\n        // move piece\n        if (activeCoordinates && isPotentialMove) {\n            if (playerColor !== gameState.turn) {\n                newGameState.activeCoordinates = undefined\n                setGameState(newGameState)\n                return\n            }\n\n            newGameState.boardState[coordinates.row][coordinates.column] =\n                newGameState.boardState[activeCoordinates.row][activeCoordinates.column]\n            newGameState.boardState[activeCoordinates.row][activeCoordinates.column] = {\n                empty: true,\n            }\n\n            newGameState.turn = gameState.turn === Color.black ? Color.white : Color.black\n            newGameState.activeCoordinates = undefined\n\n            if (!cell.empty && cell.piece === Piece.King) {\n                newGameState.winner = playerColor\n            }\n\n            socket.current.emit('onUpdateGame', newGameState)\n            sound.play()\n        }\n\n        setGameState(newGameState)\n    }\n\n    return (\n        <CellContainer\n            isActiveCell={isActiveCell}\n            baseColor={baseColor}\n            onClick={onCellClickHandler}\n        >\n            <CenteredDiv>\n                {isPotentialMove ? <PotentialMove empty={cell.empty} /> : null}\n                {!cell.empty ? (\n                    <PieceImg\n                        src={`../chess_icons/${cell.piece}_${cell.color}.svg`}\n                        alt={`${cell.piece}_${cell.color}`}\n                        color={playerColor}\n                    />\n                ) : null}\n            </CenteredDiv>\n        </CellContainer>\n    )\n})\n\nconst PieceImg = styled.img<{ color: Color }>`\n    z-index: 1;\n    position: absolute;\n    transform: ${props => (props.color === Color.black ? 'rotate(180deg)' : 'none')};\n`\n\nconst CellContainer = styled.div<{ isActiveCell: boolean; baseColor: Color }>`\n    display: table-cell;\n    height: max(calc((100vh - 200px) / 8), 40px);\n    width: max(calc((100vh - 200px) / 8), 40px);\n    border: solid 1px;\n    cursor: pointer;\n    background-color: ${props =>\n        props.isActiveCell\n            ? props.theme.color.tertiary\n            : props.baseColor === Color.black\n            ? props.theme.color.primary\n            : props.theme.color.secondary};\n`\n\nconst PotentialMove = styled.div<{ empty: boolean }>`\n    position: absolute;\n    height: ${props => (props.empty ? '25px' : '50px')};\n    width: ${props => (props.empty ? '25px' : '50px')};\n    background-color: ${props => props.theme.color.grey};\n    border-radius: 50%;\n    display: inline-block;\n`\n","import styled from 'styled-components'\n\nimport { Color, Piece } from '../types'\n\nexport function Header(props: { turn: Color; playerColor: Color }) {\n    return (\n        <HeaderContainer>\n            <Turn turn={props.turn} />\n            <YouAre playerColor={props.playerColor} />\n        </HeaderContainer>\n    )\n}\n\nconst HeaderContainer = styled.div`\n    min-height: 50px;\n    padding-top: 5px;\n    width: 100%;\n`\n\nfunction Turn(props: { turn: Color }) {\n    return (\n        <TurnWrapper>\n            Turn <PawnImage src={`../chess_icons/${Piece.Pawn}_${props.turn}.svg`} alt=\"turn\" />\n        </TurnWrapper>\n    )\n}\n\nconst TurnWrapper = styled.div`\n    position: absolute;\n    font-size: 20px;\n    left: 10%;\n    font-weight: bold;\n    display: flex;\n    align-items: center;\n    font-family: ${props => props.theme.fontFamily};\n`\n\nfunction YouAre(props: { playerColor: Color }) {\n    return (\n        <YouAreWrapper>\n            You are{' '}\n            <PawnImage alt=\"color\" src={`../chess_icons/${Piece.Pawn}_${props.playerColor}.svg`} />\n        </YouAreWrapper>\n    )\n}\n\nconst YouAreWrapper = styled.div`\n    position: absolute;\n    font-size: 20px;\n    right: 10%;\n    font-weight: bold;\n    display: flex;\n    align-items: center;\n    font-family: ${props => props.theme.fontFamily};\n`\n\nconst PawnImage = styled.img`\n    padding-left: 25px;\n    padding-bottom: 5px;\n`\n","import React from 'react'\nimport io from 'socket.io-client'\nimport styled from 'styled-components'\n\nimport { GameState, Coordinates, Color } from '../types'\nimport { getPotentialMoves } from '../moves'\nimport { CellComponent } from './Cell'\nimport { ShareLink } from './ShareLink'\nimport { Header } from './Header'\n\nexport function Game(props: { gameState: GameState; playerColor: Color }) {\n    const [gameState, setGameState] = React.useState<GameState>(props.gameState)\n    const [potentialMoves, setPotentialMoves] = React.useState<Coordinates[]>([])\n\n    const socket = React.useRef(io(`/namespace/${gameState.gameId}`))\n    let baseColor = Color.white\n\n    React.useEffect(() => {\n        if (!gameState.activeCoordinates) {\n            setPotentialMoves([])\n            return\n        }\n\n        setPotentialMoves(getPotentialMoves(gameState, props.playerColor))\n    }, [gameState, props.playerColor])\n\n    React.useEffect(() => {\n        socket.current.on('updateGame', (gameState: GameState) => {\n            setGameState(gameState)\n        })\n    }, [])\n\n    return (\n        <GameWrapper>\n            <Header turn={gameState.turn} playerColor={props.playerColor} />\n            <BoardWrapper>\n                {gameState.winner ? <Winner winner={gameState.winner} /> : null}\n                <Board color={props.playerColor}>\n                    {gameState.boardState.map((r, i) => {\n                        baseColor = baseColor === Color.white ? Color.black : Color.white\n                        return (\n                            <Row key={i}>\n                                {r.map((c, j) => {\n                                    baseColor =\n                                        baseColor === Color.white ? Color.black : Color.white\n                                    return (\n                                        <CellComponent\n                                            key={i.toString().concat(j.toString())}\n                                            cell={c}\n                                            coordinates={{ row: i, column: j }}\n                                            potentialMoves={potentialMoves}\n                                            playerColor={props.playerColor}\n                                            gameState={gameState}\n                                            setGameState={setGameState}\n                                            baseColor={baseColor}\n                                            socket={socket}\n                                        />\n                                    )\n                                })}\n                            </Row>\n                        )\n                    })}\n                </Board>\n            </BoardWrapper>\n            {/* <ShareLink gameId={gameState.gameId} /> */}\n        </GameWrapper>\n    )\n}\n\nfunction Winner(props: { winner: Color }) {\n    return (\n        <WinnerWrapper>\n            <WinnerPawn src={`../chess_icons/pawn_${props.winner}.svg`} />\n            Winner\n        </WinnerWrapper>\n    )\n}\n\nconst WinnerWrapper = styled.div`\n    position: absolute;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    font-size: 50px;\n    font-weight: bold;\n    z-index: 2;\n    font-family: ${props => props.theme.fontFamily};\n`\n\nconst WinnerPawn = styled.img`\n    height: 200px;\n    width: 200px;\n    animation: bubble 1s forwards;\n    animation-name: slides;\n    animation-duration: 2s;\n`\n\nconst BoardWrapper = styled.div`\n    flex: 1;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`\n\nconst GameWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 100vw;\n    height: 100vh;\n`\n\nconst Board = styled.div<{ color: Color }>`\n    overflow: hidden;\n    display: table;\n    table-layout: fixed;\n    border-spacing: 3px;\n    border-collapse: separate;\n    transform: ${props => (props.color === Color.black ? 'rotate(180deg)' : 'none')};\n`\n\nconst Row = styled.div`\n    display: table-row;\n`\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { HomeImage, HomeWrapper } from './Home'\n\nexport function GameNotFound() {\n    return (\n        <HomeWrapper>\n            <HomeImage src={'../chess_icons/chess_home.svg'} alt=\"home\" />\n            <GameNotFoundLabel>Game Not Found</GameNotFoundLabel>\n        </HomeWrapper>\n    )\n}\n\nconst GameNotFoundLabel = styled.span`\n    font-size: 24px;\n    font-weight: bold;\n    color: ${props => props.theme.color.primary};\n    font-family: ${props => props.theme.fontFamily};\n`\n","import React from 'react'\nimport { useParams } from 'react-router-dom'\n\nimport { Color, GameState } from '../types'\nimport { Game } from './Game'\nimport { GameNotFound } from './GameNotFound'\n\nexport function GameWrapper() {\n    const { gameId } = useParams<{ gameId: string }>()\n    const [gameState, setGameState] = React.useState<GameState | undefined>()\n    const [fetchError, setFetchError] = React.useState<boolean>(false)\n    const [playerColor, setPlayerColor] = React.useState<Color>(Color.white)\n\n    React.useEffect(() => {\n        fetch(`/get-game-state/${gameId}`)\n            .then(response => {\n                if (response.status === 404) {\n                    setFetchError(true)\n                }\n                return response.json()\n            })\n            .then(data => {\n                setGameState(data)\n            })\n            .catch(() => {\n                setFetchError(true)\n            })\n\n        let storedPlayerColor = window.sessionStorage.getItem(gameId)\n        if (!storedPlayerColor) {\n            storedPlayerColor = Color.black\n            window.sessionStorage.setItem(gameId, 'black')\n        }\n        setPlayerColor(storedPlayerColor as Color)\n    }, [gameId])\n\n    return fetchError ? (\n        <GameNotFound />\n    ) : gameState ? (\n        <Game gameState={gameState} playerColor={playerColor} />\n    ) : (\n        <LoadingSpinner />\n    )\n}\n\nfunction LoadingSpinner() {\n    return <div className=\"loader\"></div>\n}\n","import React from 'react'\nimport styled, { ThemeProvider } from 'styled-components'\n\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport { Home } from './components/Home'\nimport { GameWrapper } from './components/GameWrapper'\n\nfunction App() {\n    return (\n        <ThemeProvider theme={theme}>\n            <AppWrapper>\n                <BrowserRouter>\n                    <Switch>\n                        <Route path=\"/game/:gameId\">\n                            <GameWrapper />\n                        </Route>\n                        <Route path=\"/\">\n                            <Home />\n                        </Route>\n                    </Switch>\n                </BrowserRouter>\n            </AppWrapper>\n        </ThemeProvider>\n    )\n}\n\nconst AppWrapper = styled.div`\n    height: 100vh;\n    width: 100vw;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nexport const theme = {\n    color: {\n        primary: '#65A259',\n        secondary: '#EBF4D2',\n        tertiary: '#EDFF6B',\n        grey: '#bbb',\n    },\n    fontFamily: 'Courier New',\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry)\n            getFID(onPerfEntry)\n            getFCP(onPerfEntry)\n            getLCP(onPerfEntry)\n            getTTFB(onPerfEntry)\n        })\n    }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}